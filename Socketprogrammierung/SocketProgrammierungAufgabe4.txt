4.1
454	10.914274	127.0.0.1	127.0.0.2	TCP	56	53371 → 5000 [SYN] Seq=0 Win=65535 Len=0 MSS=65495 WS=256 SACK_PERM=1
455	10.914329	127.0.0.2	127.0.0.1	TCP	56	5000 → 53371 [SYN, ACK] Seq=0 Ack=1 Win=65535 Len=0 MSS=65495 WS=256 SACK_PERM=1
456	10.914438	127.0.0.1	127.0.0.2	TCP	44	53371 → 5000 [ACK] Seq=1 Ack=1 Win=2619648 Len=0

506	17.040544	127.0.0.2	127.0.0.1	TCP	44	5000 → 53371 [ACK] Seq=1 Ack=20 Win=2619648 Len=0
508	17.040827	127.0.0.1	127.0.0.2	TCP	44	53371 → 5000 [ACK] Seq=20 Ack=9 Win=2619648 Len=0

509	17.040886	127.0.0.2	127.0.0.1	TCP	44	5000 → 53371 [FIN, ACK] Seq=9 Ack=20 Win=2619648 Len=0
510	17.040911	127.0.0.1	127.0.0.2	TCP	44	53371 → 5000 [ACK] Seq=20 Ack=10 Win=2619648 Len=0

511	17.041018	127.0.0.1	127.0.0.2	TCP	44	53371 → 5000 [FIN, ACK] Seq=20 Ack=10 Win=2619648 Len=0
512	17.041047	127.0.0.2	127.0.0.1	TCP	44	5000 → 53371 [ACK] Seq=10 Ack=21 Win=2619648 Len=0


1.
	454 -> client.py:19 -> self.clientSocket.connect((self.ip, self.port))
	455 -> server.py:34 -> connectionSocket, addr = self.serverSocket.accept()
	456 -> client.py:19 -> self.clientSocket.connect((self.ip, self.port))

	506 -> server.py:53 -> msg = connectionSocket.recv(2048)
	508 -> client.py:43 -> result = self.clientSocket.recv(2048)

	509 - 512 -> close befehle der beiden Programme

2.
	455 beendet client.py:19 -> self.clientSocket.connect((self.ip, self.port))
	456 beendet server.py:34 -> connectionSocket, addr = self.serverSocket.accept()

	506 beendet server.py:53 -> msg = connectionSocket.recv(2048)
	508 beendet client.py:43 -> result = self.clientSocket.recv(2048)

	512 beendet die close befehle beider Programme


4.2

1.	ipaddr, port = self.clientSocket.getsockname()
2.	client.py:19 -> self.clientSocket.connect((self.ip, self.port))
3.	self.clientSocket.bind(('127.0.0.3', 3000))
4.	notwendig wegen Paketverlust
	try catch führt den try block aus und geht in den catch block wenn eine (bestimmte) exception geworfen wird
	socket.setdefaulttimeout(9.3)
5.	



5.2
